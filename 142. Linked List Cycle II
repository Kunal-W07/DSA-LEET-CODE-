approch 2 two imp ******
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* cycle(ListNode *head){
        ListNode *slow = head;
        ListNode *fast = head;

        while(fast != NULL){
            fast = fast->next;
            if(fast != NULL){
                fast = fast->next;
                slow = slow->next;
                if(slow == fast){
                    return fast;
                }
            }
        }
        return nullptr;
    }

    ListNode *detectCycle(ListNode *head) {
        ListNode* fast = cycle(head) ;
        if(fast == nullptr){
            return nullptr;
        }

        ListNode* slow = head;

        while(slow != fast){
            slow = slow->next;
            fast = fast->next;
        }
        return slow;

    }
};




/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode* temp = head;
        unordered_map<ListNode*,bool>mapp;

        while(temp != NULL){
            if(mapp[temp]== true){
                return temp;
            }
            mapp[temp] = true;
            temp = temp->next;
        }
        return NULL;

        
        
    }
};
