class Solution {
public:
    int myAtoi(string s) {
        int n = s.length();
        long long ans = 0; // use long long to prevent overflow during calculation
        int sign = 1;
        int i = 0;

        // Step 1: Skip spaces
        while (i < n && s[i] == ' ') {
            i++;
        }

        // Step 2: Handle sign
        if (i < n) {
            if (s[i] == '-') {
                sign = -1;
                i++;
            } else if (s[i] == '+') {
                sign = 1;
                i++;
            }
        }

        // Step 3: Convert digits
        while (i < n && isdigit(s[i])) {
            ans = ans * 10 + (s[i] - '0');

            // Step 4: Clamp to INT range
            if (sign == 1 && ans > INT_MAX) return INT_MAX;
            if (sign == -1 && -ans < INT_MIN) return INT_MIN;

            i++;
        }

        return sign * ans;
    }
};
